[{"/Users/shaneConwell/Desktop/bootcamp/homework/GraphQL-book-search-engine/client/src/index.js":"1","/Users/shaneConwell/Desktop/bootcamp/homework/GraphQL-book-search-engine/client/src/App.js":"2","/Users/shaneConwell/Desktop/bootcamp/homework/GraphQL-book-search-engine/client/src/pages/SavedBooks.js":"3","/Users/shaneConwell/Desktop/bootcamp/homework/GraphQL-book-search-engine/client/src/pages/SearchBooks.js":"4","/Users/shaneConwell/Desktop/bootcamp/homework/GraphQL-book-search-engine/client/src/components/Navbar.js":"5","/Users/shaneConwell/Desktop/bootcamp/homework/GraphQL-book-search-engine/client/src/components/SignupForm.js":"6","/Users/shaneConwell/Desktop/bootcamp/homework/GraphQL-book-search-engine/client/src/utils/auth.js":"7","/Users/shaneConwell/Desktop/bootcamp/homework/GraphQL-book-search-engine/client/src/utils/localStorage.js":"8","/Users/shaneConwell/Desktop/bootcamp/homework/GraphQL-book-search-engine/client/src/utils/API.js":"9","/Users/shaneConwell/Desktop/bootcamp/homework/GraphQL-book-search-engine/client/src/components/LoginForm.js":"10","/Users/shaneConwell/Desktop/bootcamp/homework/GraphQL-book-search-engine/client/src/utils/mutations.js":"11","/Users/shaneConwell/Desktop/bootcamp/homework/GraphQL-book-search-engine/client/src/utils/queries.js":"12"},{"size":266,"mtime":1628349309098,"results":"13","hashOfConfig":"14"},{"size":1427,"mtime":1628440463936,"results":"15","hashOfConfig":"14"},{"size":2512,"mtime":1628539648689,"results":"16","hashOfConfig":"14"},{"size":5008,"mtime":1628565058110,"results":"17","hashOfConfig":"14"},{"size":2524,"mtime":1628349309094,"results":"18","hashOfConfig":"14"},{"size":3732,"mtime":1628441098954,"results":"19","hashOfConfig":"14"},{"size":1234,"mtime":1628349309103,"results":"20","hashOfConfig":"14"},{"size":793,"mtime":1628349309104,"results":"21","hashOfConfig":"14"},{"size":1527,"mtime":1628536928422,"results":"22","hashOfConfig":"14"},{"size":3046,"mtime":1628440206127,"results":"23","hashOfConfig":"14"},{"size":859,"mtime":1628539726295,"results":"24","hashOfConfig":"14"},{"size":926,"mtime":1628537145126,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"dmuhp0",{"filePath":"29","messages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33"},{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"28"},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"28"},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"/Users/shaneConwell/Desktop/bootcamp/homework/GraphQL-book-search-engine/client/src/index.js",[],["54","55"],"/Users/shaneConwell/Desktop/bootcamp/homework/GraphQL-book-search-engine/client/src/App.js",[],"/Users/shaneConwell/Desktop/bootcamp/homework/GraphQL-book-search-engine/client/src/pages/SavedBooks.js",["56","57","58"],"import React, { useState } from 'react';\nimport { Jumbotron, Container, CardColumns, Card, Button } from 'react-bootstrap';\nimport { useQuery , useMutation } from '@apollo/client';\nimport { GET_ME } from '../utils/queries';\nimport { DELETE_BOOK } from '../utils/mutations';\n// import { getMe, deleteBook } from '../utils/API';\nimport Auth from '../utils/auth';\nimport { removeBookId } from '../utils/localStorage';\n\nconst SavedBooks = () => {\n  const { loading, error, data } = useQuery(GET_ME);\n  const [deleteBook, { }] = useMutation(DELETE_BOOK);\n  if (loading) return \"Loading...\";\n  if (error) return `Error! ${error.message}`;\n\n  const userData = data?.me || [];\n\n\n  // create function that accepts the book's mongo _id value as param and deletes the book from the database\n  const handleDeleteBook = async (bookId) => {\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\n\n    if (!token) {\n      return false;\n    }\n\n    try {\n      const { data } = await deleteBook({\n        variables: {\n          bookId: bookId\n        }\n      });\n\n      // upon success, remove book's id from localStorage\n      removeBookId(bookId);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  // if data isn't here yet, say so\n  if ( loading ) {\n    return <h2>LOADING...</h2>;\n  }\n\n  return (\n    <>\n      <Jumbotron fluid className='text-light bg-dark'>\n        <Container>\n          <h1>Viewing saved books!</h1>\n        </Container>\n      </Jumbotron>\n      <Container>\n        <h2>\n          {userData.savedBooks.length\n            ? `Viewing ${userData.savedBooks.length} saved ${userData.savedBooks.length === 1 ? 'book' : 'books'}:`\n            : 'You have no saved books!'}\n        </h2>\n        <CardColumns>\n          {userData.savedBooks.map((book) => {\n            return (\n              <Card key={book.bookId} border='dark'>\n                {book.image ? <Card.Img src={book.image} alt={`The cover for ${book.title}`} variant='top' /> : null}\n                <Card.Body>\n                  <Card.Title>{book.title}</Card.Title>\n                  <p className='small'>Authors: {book.authors}</p>\n                  <Card.Text>{book.description}</Card.Text>\n                  <Button className='btn-block btn-danger' onClick={() => handleDeleteBook(book.bookId)}>\n                    Delete this Book!\n                  </Button>\n                </Card.Body>\n              </Card>\n            );\n          })}\n        </CardColumns>\n      </Container>\n    </>\n  );\n};\n\nexport default SavedBooks;\n","/Users/shaneConwell/Desktop/bootcamp/homework/GraphQL-book-search-engine/client/src/pages/SearchBooks.js",["59","60","61"],"/Users/shaneConwell/Desktop/bootcamp/homework/GraphQL-book-search-engine/client/src/components/Navbar.js",[],"/Users/shaneConwell/Desktop/bootcamp/homework/GraphQL-book-search-engine/client/src/components/SignupForm.js",["62","63"],"import React, { useState } from 'react';\nimport { Form, Button, Alert } from 'react-bootstrap';\n\nimport { useMutation } from '@apollo/client';\nimport { CREATE_USER } from '../utils/mutations';\n\n// import { createUser } from '../utils/API';\nimport Auth from '../utils/auth';\n\nconst SignupForm = () => {\n  // set initial form state\n  const [userFormData, setUserFormData] = useState({ username: '', email: '', password: '' });\n\n  const [createUser, { error, data }] = useMutation(CREATE_USER);\n\n  // set state for form validation\n  const [validated] = useState(false);\n  // set state for alert\n  const [showAlert, setShowAlert] = useState(false);\n\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n    setUserFormData({ ...userFormData, [name]: value });\n  };\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n    console.log(userFormData);\n\n\n    try {\n      const { data } = await createUser({\n        variables: { ...userFormData },\n      });\nconsole.log(data);\n      Auth.login(data.createUser.token);\n    } catch (e) {\n      console.error(e);\n    }\n  \n    // check if form has everything (as per react-bootstrap docs)\n    // const form = event.currentTarget;\n    // if (form.checkValidity() === false) {\n    //   event.preventDefault();\n    //   event.stopPropagation();\n    // }\n\n    // try {\n    //   const response = await createUser(userFormData);\n\n    //   if (!response.ok) {\n    //     throw new Error('something went wrong!');\n    //   }\n\n    //   const { token, user } = await response.json();\n    //   console.log(user);\n    //   Auth.login(token);\n    // } catch (err) {\n    //   console.error(err);\n    //   setShowAlert(true);\n    // }\n\n    setUserFormData({\n      username: '',\n      email: '',\n      password: '',\n    });\n  };\n\n  return (\n    <>\n      {/* This is needed for the validation functionality above */}\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\n        {/* show alert if server response is bad */}\n        <Alert dismissible onClose={() => setShowAlert(false)} show={showAlert} variant='danger'>\n          Something went wrong with your signup!\n        </Alert>\n\n        <Form.Group>\n          <Form.Label htmlFor='username'>Username</Form.Label>\n          <Form.Control\n            type='text'\n            placeholder='Your username'\n            name='username'\n            onChange={handleInputChange}\n            value={userFormData.username}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Username is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='email'>Email</Form.Label>\n          <Form.Control\n            type='email'\n            placeholder='Your email address'\n            name='email'\n            onChange={handleInputChange}\n            value={userFormData.email}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Email is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='password'>Password</Form.Label>\n          <Form.Control\n            type='password'\n            placeholder='Your password'\n            name='password'\n            onChange={handleInputChange}\n            value={userFormData.password}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Password is required!</Form.Control.Feedback>\n        </Form.Group>\n        <Button\n          disabled={!(userFormData.username && userFormData.email && userFormData.password)}\n          type='submit'\n          variant='success'>\n          Submit\n        </Button>\n      </Form>\n    </>\n  );\n};\n\nexport default SignupForm;\n","/Users/shaneConwell/Desktop/bootcamp/homework/GraphQL-book-search-engine/client/src/utils/auth.js",[],"/Users/shaneConwell/Desktop/bootcamp/homework/GraphQL-book-search-engine/client/src/utils/localStorage.js",[],"/Users/shaneConwell/Desktop/bootcamp/homework/GraphQL-book-search-engine/client/src/utils/API.js",[],"/Users/shaneConwell/Desktop/bootcamp/homework/GraphQL-book-search-engine/client/src/components/LoginForm.js",["64","65"],"// see SignupForm.js for comments\nimport React, { useState } from 'react';\nimport { Form, Button, Alert } from 'react-bootstrap';\nimport { useMutation } from '@apollo/client';\nimport { LOGIN_USER } from '../utils/mutations';\n\n\n// import { loginUser } from '../utils/API';\nimport Auth from '../utils/auth';\n\nconst LoginForm = (props) => {\n  const [userFormData, setUserFormData] = useState({ email: '', password: '' });\n  const [validated] = useState(false);\n  const [showAlert, setShowAlert] = useState(false);\n\n  const [login, { error, data }] = useMutation(LOGIN_USER);\n\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n    setUserFormData({ ...userFormData, [name]: value });\n  };\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n    console.log(userFormData);\n\n    try {\n      const { data } = await login({\n        variables: { ...userFormData },\n      });\n\n      Auth.login(data.login.token);\n    } catch (e) {\n      console.error(e);\n    }\n    // check if form has everything (as per react-bootstrap docs)\n    // const form = event.currentTarget;\n    // if (form.checkValidity() === false) {\n    //   event.preventDefault();\n    //   event.stopPropagation();\n    // }\n\n    // try {\n    //   const response = await loginUser(userFormData);\n\n    //   if (!response.ok) {\n    //     throw new Error('something went wrong!');\n    //   }\n\n    //   const { token, user } = await response.json();\n    //   console.log(user);\n    //   Auth.login(token);\n    // } catch (err) {\n    //   console.error(err);\n    //   setShowAlert(true);\n    // }\n\n    setUserFormData({\n      username: '',\n      email: '',\n      password: '',\n    });\n  };\n\n  return (\n    <>\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\n        <Alert dismissible onClose={() => setShowAlert(false)} show={showAlert} variant='danger'>\n          Something went wrong with your login credentials!\n        </Alert>\n        <Form.Group>\n          <Form.Label htmlFor='email'>Email</Form.Label>\n          <Form.Control\n            type='text'\n            placeholder='Your email'\n            name='email'\n            onChange={handleInputChange}\n            value={userFormData.email}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Email is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='password'>Password</Form.Label>\n          <Form.Control\n            type='password'\n            placeholder='Your password'\n            name='password'\n            onChange={handleInputChange}\n            value={userFormData.password}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Password is required!</Form.Control.Feedback>\n        </Form.Group>\n        <Button\n          disabled={!(userFormData.email && userFormData.password)}\n          type='submit'\n          variant='success'>\n          Submit\n        </Button>\n      </Form>\n    </>\n  );\n};\n\nexport default LoginForm;\n","/Users/shaneConwell/Desktop/bootcamp/homework/GraphQL-book-search-engine/client/src/utils/mutations.js",[],"/Users/shaneConwell/Desktop/bootcamp/homework/GraphQL-book-search-engine/client/src/utils/queries.js",[],{"ruleId":"66","replacedBy":"67"},{"ruleId":"68","replacedBy":"69"},{"ruleId":"70","severity":1,"message":"71","line":1,"column":17,"nodeType":"72","messageId":"73","endLine":1,"endColumn":25},{"ruleId":"74","severity":1,"message":"75","line":12,"column":22,"nodeType":"76","messageId":"77","endLine":12,"endColumn":25},{"ruleId":"70","severity":1,"message":"78","line":28,"column":15,"nodeType":"72","messageId":"73","endLine":28,"endColumn":19},{"ruleId":"70","severity":1,"message":"79","line":13,"column":22,"nodeType":"72","messageId":"73","endLine":13,"endColumn":27},{"ruleId":"70","severity":1,"message":"78","line":13,"column":29,"nodeType":"72","messageId":"73","endLine":13,"endColumn":33},{"ruleId":"70","severity":1,"message":"78","line":77,"column":15,"nodeType":"72","messageId":"73","endLine":77,"endColumn":19},{"ruleId":"70","severity":1,"message":"79","line":14,"column":24,"nodeType":"72","messageId":"73","endLine":14,"endColumn":29},{"ruleId":"70","severity":1,"message":"78","line":14,"column":31,"nodeType":"72","messageId":"73","endLine":14,"endColumn":35},{"ruleId":"70","severity":1,"message":"79","line":16,"column":19,"nodeType":"72","messageId":"73","endLine":16,"endColumn":24},{"ruleId":"70","severity":1,"message":"78","line":16,"column":26,"nodeType":"72","messageId":"73","endLine":16,"endColumn":30},"no-native-reassign",["80"],"no-negated-in-lhs",["81"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","unexpected","'data' is assigned a value but never used.","'error' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]