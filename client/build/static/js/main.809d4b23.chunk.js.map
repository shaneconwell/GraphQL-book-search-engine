{"version":3,"sources":["utils/auth.js","utils/mutations.js","utils/localStorage.js","pages/SearchBooks.js","utils/API.js","utils/queries.js","pages/SavedBooks.js","components/SignupForm.js","components/LoginForm.js","components/Navbar.js","App.js","index.js"],"names":["decode","this","getToken","token","isTokenExpired","exp","Date","now","err","localStorage","getItem","idToken","setItem","window","location","assign","removeItem","LOGIN_USER","gql","CREATE_USER","SAVE_BOOK","DELETE_BOOK","removeBookId","bookId","savedBookIds","JSON","parse","updatedSavedBookIds","filter","savedBookId","stringify","SearchBooks","useMutation","saveBook","error","data","useState","searchedBooks","setSearchedBooks","searchInput","setSearchInput","setSavedBookIds","useEffect","bookIdArr","length","handleFormSubmit","event","a","preventDefault","fetch","response","ok","Error","json","items","bookData","map","book","id","authors","volumeInfo","title","description","image","imageLinks","thumbnail","console","handleSaveBook","log","bookToSave","find","Auth","loggedIn","variables","content","Jumbotron","fluid","className","Container","Form","onSubmit","Row","Col","xs","md","Control","name","value","onChange","e","target","type","size","placeholder","Button","variant","CardColumns","Card","border","Img","src","alt","Body","Title","Text","disabled","some","onClick","GET_ME","SavedBooks","useQuery","loading","deleteBook","message","userData","me","handleDeleteBook","savedBooks","SignupForm","username","email","password","userFormData","setUserFormData","createUser","validated","showAlert","setShowAlert","handleInputChange","login","noValidate","Alert","dismissible","onClose","show","Group","Label","htmlFor","required","Feedback","LoginForm","props","AppNavbar","showModal","setShowModal","Navbar","bg","expand","Brand","as","Link","to","Toggle","Collapse","Nav","logout","Modal","onHide","Tab","defaultActiveKey","Header","closeButton","Item","eventKey","Content","Pane","handleModalClose","httpLink","createHttpLink","uri","authLink","setContext","_","headers","authorization","client","ApolloClient","link","concat","cache","InMemoryCache","App","ApolloProvider","exact","path","component","render","ReactDOM","StrictMode","document","getElementById"],"mappings":"sWAgDe,M,0FA1Cb,WACE,OAAOA,YAAOC,KAAKC,c,sBAIrB,WAEE,IAAMC,EAAQF,KAAKC,WACnB,QAASC,IAAUF,KAAKG,eAAeD,K,4BAIzC,SAAeA,GACb,IAEE,OADgBH,YAAOG,GACXE,IAAMC,KAAKC,MAAQ,IAG/B,MAAOC,GACP,OAAO,K,sBAIX,WAEE,OAAOC,aAAaC,QAAQ,c,mBAG9B,SAAMC,GAEJF,aAAaG,QAAQ,WAAYD,GACjCE,OAAOC,SAASC,OAAO,O,oBAGzB,WAEEN,aAAaO,WAAW,YAExBH,OAAOC,SAASC,OAAO,S,uBC1CdE,EAAaC,YAAH,qNAYVC,EAAcD,YAAH,wQAYXE,EAAYF,YAAH,iNAYTG,EAAcH,YAAH,iMCtBXI,EAAe,SAACC,GAC3B,IAAMC,EAAef,aAAaC,QAAQ,eACtCe,KAAKC,MAAMjB,aAAaC,QAAQ,gBAChC,KAEJ,IAAKc,EACH,OAAO,EAGT,IAAMG,EAAmB,OAAGH,QAAH,IAAGA,OAAH,EAAGA,EAAcI,QAAO,SAACC,GAAD,OAAiBA,IAAgBN,KAGlF,OAFAd,aAAaG,QAAQ,cAAea,KAAKK,UAAUH,KAE5C,G,OCmIMI,EArJK,WAElB,MAAoCC,YAAYZ,GAAhD,mBAAOa,EAAP,YAEA,GAFA,EAAmBC,MAAnB,EAA0BC,KAEgBC,mBAAS,KAAnD,mBAAOC,EAAP,KAAsBC,EAAtB,KAEA,EAAsCF,mBAAS,IAA/C,mBAAOG,EAAP,KAAoBC,EAApB,KAGA,EAAwCJ,mBDlBnB3B,aAAaC,QAAQ,eACtCe,KAAKC,MAAMjB,aAAaC,QAAQ,gBAChC,ICgBJ,mBAAOc,EAAP,KAAqBiB,EAArB,KAIAC,qBAAU,WACR,OAAO,WDhBgB,IAACC,KCgBCnB,GDfboB,OACZnC,aAAaG,QAAQ,cAAea,KAAKK,UAAUa,IAEnDlC,aAAaO,WAAW,mBCgB1B,IAAM6B,EAAgB,uCAAG,WAAOC,GAAP,qBAAAC,EAAA,yDACvBD,EAAME,iBAEDT,EAHkB,0CAId,GAJc,gCC2BlBU,MAAM,iDAAD,ODnBiCV,IARpB,WAQfW,EARe,QAUPC,GAVO,sBAWb,IAAIC,MAAM,yBAXG,wBAcGF,EAASG,OAdZ,iBAcbC,EAda,EAcbA,MAEFC,EAAWD,EAAME,KAAI,SAACC,GAAD,YAAW,CACpClC,OAAQkC,EAAKC,GACbC,QAASF,EAAKG,WAAWD,SAAW,CAAC,wBACrCE,MAAOJ,EAAKG,WAAWC,MACvBC,YAAaL,EAAKG,WAAWE,YAC7BC,OAAO,UAAAN,EAAKG,WAAWI,kBAAhB,eAA4BC,YAAa,OAGlD3B,EAAiBiB,GACjBf,EAAe,IAzBM,kDA2BrB0B,QAAQhC,MAAR,MA3BqB,0DAAH,sDAgChBiC,EAAc,uCAAG,WAAQ5C,GAAR,mBAAAwB,EAAA,yDAIrBmB,QAAQE,IAAI7C,GAEN8C,EAAahC,EAAciC,MAAK,SAACb,GAAD,OAAUA,EAAKlC,SAAWA,KAG1DpB,EAAQoE,EAAKC,WAAaD,EAAKrE,WAAa,KAChDgE,QAAQE,IAAIC,EAAYlE,GACrBA,EAXgB,0CAYZ,GAZY,gCAgBI8B,EAAS,CAC9BwC,UAAW,CACTC,QAAQ,eACHL,MAnBU,kBAgBXlC,KAaRM,EAAgB,GAAD,mBAAKjB,GAAL,CAAmB6C,EAAW9C,UA7B1B,kDA+BnB2C,QAAQhC,MAAR,MA/BmB,0DAAH,sDAmCpB,OACE,qCACE,cAACyC,EAAA,EAAD,CAAWC,OAAK,EAACC,UAAU,qBAA3B,SACE,eAACC,EAAA,EAAD,WACE,mDACA,cAACC,EAAA,EAAD,CAAMC,SAAUnC,EAAhB,SACE,eAACkC,EAAA,EAAKE,IAAN,WACE,cAACC,EAAA,EAAD,CAAKC,GAAI,GAAIC,GAAI,EAAjB,SACE,cAACL,EAAA,EAAKM,QAAN,CACEC,KAAK,cACLC,MAAOhD,EACPiD,SAAU,SAACC,GAAD,OAAOjD,EAAeiD,EAAEC,OAAOH,QACzCI,KAAK,OACLC,KAAK,KACLC,YAAY,wBAGhB,cAACX,EAAA,EAAD,CAAKC,GAAI,GAAIC,GAAI,EAAjB,SACE,cAACU,EAAA,EAAD,CAAQH,KAAK,SAASI,QAAQ,UAAUH,KAAK,KAA7C,uCASV,eAACd,EAAA,EAAD,WACE,6BACGzC,EAAcO,OAAd,kBACcP,EAAcO,OAD5B,aAEG,+BAEN,cAACoD,EAAA,EAAD,UACG3D,EAAcmB,KAAI,SAACC,GAClB,OACE,eAACwC,EAAA,EAAD,CAAwBC,OAAO,OAA/B,UACGzC,EAAKM,MACJ,cAACkC,EAAA,EAAKE,IAAN,CAAUC,IAAK3C,EAAKM,MAAOsC,IAAG,wBAAmB5C,EAAKI,OAASkC,QAAQ,QACrE,KACJ,eAACE,EAAA,EAAKK,KAAN,WACE,cAACL,EAAA,EAAKM,MAAN,UAAa9C,EAAKI,QAClB,oBAAGgB,UAAU,QAAb,sBAA+BpB,EAAKE,WACpC,cAACsC,EAAA,EAAKO,KAAN,UAAY/C,EAAKK,cAChBS,EAAKC,YACJ,cAACsB,EAAA,EAAD,CACEW,SAAQ,OAAEjF,QAAF,IAAEA,OAAF,EAAEA,EAAckF,MAAK,SAAC7E,GAAD,OAAiBA,IAAgB4B,EAAKlC,UACnEsD,UAAU,qBACV8B,QAAS,kBAAMxC,EAAeV,EAAKlC,SAHrC,UAIe,OAAZC,QAAY,IAAZA,OAAA,EAAAA,EAAckF,MAAK,SAAC7E,GAAD,OAAiBA,IAAgB4B,EAAKlC,WACtD,oCACA,yBAfDkC,EAAKlC,oB,kBE5EjBqF,GApDc1F,YAAH,6MAkBEA,YAAH,kRAkBIA,YAAH,gPAgBFA,YAAH,sMCyBJ2F,EAvEI,WACjB,MAAiCC,YAASF,GAAlCG,EAAR,EAAQA,QAAS7E,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KACxB,EAA0BH,YAAYX,GAAtC,mBAAO2F,EAAP,KACA,GADA,kBACID,EAAS,MAAO,aACpB,GAAI7E,EAAO,MAAM,UAAN,OAAiBA,EAAM+E,SAElC,IAAMC,GAAe,OAAJ/E,QAAI,IAAJA,OAAA,EAAAA,EAAMgF,KAAM,GAIvBC,EAAgB,uCAAG,WAAO7F,GAAP,eAAAwB,EAAA,yDACTwB,EAAKC,WAAaD,EAAKrE,WAAa,KAD3B,0CAId,GAJc,gCAQE8G,EAAW,CAChCvC,UAAW,CACTlD,OAAQA,KAVS,kBAQbY,KAORb,EAAaC,GAfQ,kDAiBrB2C,QAAQhC,MAAR,MAjBqB,0DAAH,sDAsBtB,OAAK6E,EACI,4CAIP,qCACE,cAACpC,EAAA,EAAD,CAAWC,OAAK,EAACC,UAAU,qBAA3B,SACE,cAACC,EAAA,EAAD,UACE,0DAGJ,eAACA,EAAA,EAAD,WACE,6BACGoC,EAASG,WAAWzE,OAApB,kBACcsE,EAASG,WAAWzE,OADlC,kBACiF,IAA/BsE,EAASG,WAAWzE,OAAe,OAAS,QAD9F,KAEG,6BAEN,cAACoD,EAAA,EAAD,UACGkB,EAASG,WAAW7D,KAAI,SAACC,GACxB,OACE,eAACwC,EAAA,EAAD,CAAwBC,OAAO,OAA/B,UACGzC,EAAKM,MAAQ,cAACkC,EAAA,EAAKE,IAAN,CAAUC,IAAK3C,EAAKM,MAAOsC,IAAG,wBAAmB5C,EAAKI,OAASkC,QAAQ,QAAW,KAChG,eAACE,EAAA,EAAKK,KAAN,WACE,cAACL,EAAA,EAAKM,MAAN,UAAa9C,EAAKI,QAClB,oBAAGgB,UAAU,QAAb,sBAA+BpB,EAAKE,WACpC,cAACsC,EAAA,EAAKO,KAAN,UAAY/C,EAAKK,cACjB,cAACgC,EAAA,EAAD,CAAQjB,UAAU,uBAAuB8B,QAAS,kBAAMS,EAAiB3D,EAAKlC,SAA9E,oCANOkC,EAAKlC,oB,qDCkEf+F,GAtHI,WAEjB,MAAwClF,mBAAS,CAAEmF,SAAU,GAAIC,MAAO,GAAIC,SAAU,KAAtF,mBAAOC,EAAP,KAAqBC,EAArB,KAEA,EAAsC3F,YAAYb,GAAlD,mBAAOyG,EAAP,YAGA,GAHA,EAAqB1F,MAArB,EAA4BC,KAGRC,oBAAS,IAAtByF,EAAP,oBAEA,EAAkCzF,oBAAS,GAA3C,mBAAO0F,EAAP,KAAkBC,EAAlB,KAEMC,EAAoB,SAAClF,GACzB,MAAwBA,EAAM4C,OAAtBJ,EAAR,EAAQA,KAAMC,EAAd,EAAcA,MACdoC,EAAgB,2BAAKD,GAAN,kBAAqBpC,EAAOC,MAGvC1C,EAAgB,uCAAG,WAAOC,GAAP,iBAAAC,EAAA,6DACvBD,EAAME,iBACNkB,QAAQE,IAAIsD,GAFW,kBAMEE,EAAW,CAChCnD,UAAU,eAAMiD,KAPG,gBAMbvF,EANa,EAMbA,KAGd+B,QAAQE,IAAIjC,GACNoC,EAAK0D,MAAM9F,EAAKyF,WAAWzH,OAVN,kDAYrB+D,QAAQhC,MAAR,MAZqB,QAqCvByF,EAAgB,CACdJ,SAAU,GACVC,MAAO,GACPC,SAAU,KAxCW,0DAAH,sDA4CtB,OACE,mCAEE,eAAC1C,EAAA,EAAD,CAAMmD,YAAU,EAACL,UAAWA,EAAW7C,SAAUnC,EAAjD,UAEE,cAACsF,EAAA,EAAD,CAAOC,aAAW,EAACC,QAAS,kBAAMN,GAAa,IAAQO,KAAMR,EAAW/B,QAAQ,SAAhF,oDAIA,eAAChB,EAAA,EAAKwD,MAAN,WACE,cAACxD,EAAA,EAAKyD,MAAN,CAAYC,QAAQ,WAApB,sBACA,cAAC1D,EAAA,EAAKM,QAAN,CACEM,KAAK,OACLE,YAAY,gBACZP,KAAK,WACLE,SAAUwC,EACVzC,MAAOmC,EAAaH,SACpBmB,UAAQ,IAEV,cAAC3D,EAAA,EAAKM,QAAQsD,SAAd,CAAuBhD,KAAK,UAA5B,sCAGF,eAACZ,EAAA,EAAKwD,MAAN,WACE,cAACxD,EAAA,EAAKyD,MAAN,CAAYC,QAAQ,QAApB,mBACA,cAAC1D,EAAA,EAAKM,QAAN,CACEM,KAAK,QACLE,YAAY,qBACZP,KAAK,QACLE,SAAUwC,EACVzC,MAAOmC,EAAaF,MACpBkB,UAAQ,IAEV,cAAC3D,EAAA,EAAKM,QAAQsD,SAAd,CAAuBhD,KAAK,UAA5B,mCAGF,eAACZ,EAAA,EAAKwD,MAAN,WACE,cAACxD,EAAA,EAAKyD,MAAN,CAAYC,QAAQ,WAApB,sBACA,cAAC1D,EAAA,EAAKM,QAAN,CACEM,KAAK,WACLE,YAAY,gBACZP,KAAK,WACLE,SAAUwC,EACVzC,MAAOmC,EAAaD,SACpBiB,UAAQ,IAEV,cAAC3D,EAAA,EAAKM,QAAQsD,SAAd,CAAuBhD,KAAK,UAA5B,sCAEF,cAACG,EAAA,EAAD,CACEW,WAAYiB,EAAaH,UAAYG,EAAaF,OAASE,EAAaD,UACxE9B,KAAK,SACLI,QAAQ,UAHV,0BCVO6C,GAhGG,SAACC,GACjB,MAAwCzG,mBAAS,CAAEoF,MAAO,GAAIC,SAAU,KAAxE,mBAAOC,EAAP,KAAqBC,EAArB,KACA,EAAoBvF,oBAAS,GAAtByF,EAAP,oBACA,EAAkCzF,oBAAS,GAA3C,mBAAO0F,EAAP,KAAkBC,EAAlB,KAEA,EAAiC/F,YAAYf,GAA7C,mBAAOgH,EAAP,YAEMD,GAFN,EAAgB9F,MAAhB,EAAuBC,KAEG,SAACW,GACzB,MAAwBA,EAAM4C,OAAtBJ,EAAR,EAAQA,KAAMC,EAAd,EAAcA,MACdoC,EAAgB,2BAAKD,GAAN,kBAAqBpC,EAAOC,OAGvC1C,EAAgB,uCAAG,WAAOC,GAAP,iBAAAC,EAAA,6DACvBD,EAAME,iBACNkB,QAAQE,IAAIsD,GAFW,kBAKEO,EAAM,CAC3BxD,UAAU,eAAMiD,KANG,gBAKbvF,EALa,EAKbA,KAIRoC,EAAK0D,MAAM9F,EAAK8F,MAAM9H,OATD,kDAWrB+D,QAAQhC,MAAR,MAXqB,QAmCvByF,EAAgB,CACdJ,SAAU,GACVC,MAAO,GACPC,SAAU,KAtCW,0DAAH,sDA0CtB,OACE,mCACE,eAAC1C,EAAA,EAAD,CAAMmD,YAAU,EAACL,UAAWA,EAAW7C,SAAUnC,EAAjD,UACE,cAACsF,EAAA,EAAD,CAAOC,aAAW,EAACC,QAAS,kBAAMN,GAAa,IAAQO,KAAMR,EAAW/B,QAAQ,SAAhF,+DAGA,eAAChB,EAAA,EAAKwD,MAAN,WACE,cAACxD,EAAA,EAAKyD,MAAN,CAAYC,QAAQ,QAApB,mBACA,cAAC1D,EAAA,EAAKM,QAAN,CACEM,KAAK,OACLE,YAAY,aACZP,KAAK,QACLE,SAAUwC,EACVzC,MAAOmC,EAAaF,MACpBkB,UAAQ,IAEV,cAAC3D,EAAA,EAAKM,QAAQsD,SAAd,CAAuBhD,KAAK,UAA5B,mCAGF,eAACZ,EAAA,EAAKwD,MAAN,WACE,cAACxD,EAAA,EAAKyD,MAAN,CAAYC,QAAQ,WAApB,sBACA,cAAC1D,EAAA,EAAKM,QAAN,CACEM,KAAK,WACLE,YAAY,gBACZP,KAAK,WACLE,SAAUwC,EACVzC,MAAOmC,EAAaD,SACpBiB,UAAQ,IAEV,cAAC3D,EAAA,EAAKM,QAAQsD,SAAd,CAAuBhD,KAAK,UAA5B,sCAEF,cAACG,EAAA,EAAD,CACEW,WAAYiB,EAAaF,OAASE,EAAaD,UAC/C9B,KAAK,SACLI,QAAQ,UAHV,0BCnBO+C,GApEG,WAEhB,MAAkC1G,oBAAS,GAA3C,mBAAO2G,EAAP,KAAkBC,EAAlB,KAEA,OACE,qCACE,cAACC,EAAA,EAAD,CAAQC,GAAG,OAAOnD,QAAQ,OAAOoD,OAAO,KAAxC,SACE,eAACrE,EAAA,EAAD,CAAWF,OAAK,EAAhB,UACE,cAACqE,EAAA,EAAOG,MAAR,CAAcC,GAAIC,IAAMC,GAAG,IAA3B,iCAGA,cAACN,EAAA,EAAOO,OAAR,CAAe,gBAAc,WAC7B,cAACP,EAAA,EAAOQ,SAAR,CAAiB/F,GAAG,SAApB,SACE,eAACgG,EAAA,EAAD,CAAK7E,UAAU,UAAf,UACE,cAAC6E,EAAA,EAAIJ,KAAL,CAAUD,GAAIC,IAAMC,GAAG,IAAvB,8BAIChF,EAAKC,WACJ,qCACE,cAACkF,EAAA,EAAIJ,KAAL,CAAUD,GAAIC,IAAMC,GAAG,SAAvB,4BAGA,cAACG,EAAA,EAAIJ,KAAL,CAAU3C,QAASpC,EAAKoF,OAAxB,uBAGF,cAACD,EAAA,EAAIJ,KAAL,CAAU3C,QAAS,kBAAMqC,GAAa,IAAtC,qCAOV,cAACY,EAAA,EAAD,CACEhE,KAAK,KACL0C,KAAMS,EACNc,OAAQ,kBAAMb,GAAa,IAC3B,kBAAgB,eAJlB,SAME,eAACc,EAAA,EAAIhF,UAAL,CAAeiF,iBAAiB,QAAhC,UACE,cAACH,EAAA,EAAMI,OAAP,CAAcC,aAAW,EAAzB,SACE,cAACL,EAAA,EAAMrD,MAAP,CAAa7C,GAAG,eAAhB,SACE,eAACgG,EAAA,EAAD,CAAK3D,QAAQ,QAAb,UACE,cAAC2D,EAAA,EAAIQ,KAAL,UACE,cAACR,EAAA,EAAIJ,KAAL,CAAUa,SAAS,QAAnB,qBAEF,cAACT,EAAA,EAAIQ,KAAL,UACE,cAACR,EAAA,EAAIJ,KAAL,CAAUa,SAAS,SAAnB,8BAKR,cAACP,EAAA,EAAMtD,KAAP,UACE,eAACwD,EAAA,EAAIM,QAAL,WACE,cAACN,EAAA,EAAIO,KAAL,CAAUF,SAAS,QAAnB,SACE,cAAC,GAAD,CAAWG,iBAAkB,kBAAMtB,GAAa,QAElD,cAACc,EAAA,EAAIO,KAAL,CAAUF,SAAS,SAAnB,SACE,cAAC,GAAD,CAAYG,iBAAkB,kBAAMtB,GAAa,sB,kDCrD3DuB,GAAWC,aAAe,CAC9BC,IAAK,aAGDC,GAAWC,cAAW,SAACC,EAAD,GAAqB,IAAfC,EAAc,EAAdA,QAE1B1K,EAAQM,aAAaC,QAAQ,YAEnC,MAAO,CACLmK,QAAQ,2BACHA,GADE,IAELC,cAAe3K,EAAK,iBAAaA,GAAU,SAK3C4K,GAAS,IAAIC,KAAa,CAE9BC,KAAMP,GAASQ,OAAOX,IACtBY,MAAO,IAAIC,OAoBEC,OAjBf,WACE,OACE,cAACC,GAAA,EAAD,CAAgBP,OAAQA,GAAxB,SACA,cAAC,IAAD,UACE,qCACE,cAAC,GAAD,IACA,eAAC,IAAD,WACE,cAAC,IAAD,CAAOQ,OAAK,EAACC,KAAK,IAAIC,UAAW1J,IACjC,cAAC,IAAD,CAAOwJ,OAAK,EAACC,KAAK,SAASC,UAAW5E,IACtC,cAAC,IAAD,CAAO6E,OAAQ,kBAAM,oBAAI7G,UAAU,YAAd,uCCtC/B8G,IAASD,OACP,cAAC,IAAME,WAAP,UACE,cAAC,GAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.809d4b23.chunk.js","sourcesContent":["// use this to decode a token and get the user's information out of it\nimport decode from 'jwt-decode';\n\n// create a new class to instantiate for a user\nclass AuthService {\n  // get user data\n  getProfile() {\n    return decode(this.getToken());\n  }\n\n  // check if user's logged in\n  loggedIn() {\n    // Checks if there is a saved token and it's still valid\n    const token = this.getToken();\n    return !!token && !this.isTokenExpired(token); // handwaiving here\n  }\n\n  // check if token is expired\n  isTokenExpired(token) {\n    try {\n      const decoded = decode(token);\n      if (decoded.exp < Date.now() / 1000) {\n        return true;\n      } else return false;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  getToken() {\n    // Retrieves the user token from localStorage\n    return localStorage.getItem('id_token');\n  }\n\n  login(idToken) {\n    // Saves user token to localStorage\n    localStorage.setItem('id_token', idToken);\n    window.location.assign('/');\n  }\n\n  logout() {\n    // Clear user token and profile data from localStorage\n    localStorage.removeItem('id_token');\n    // this will reload the page and reset the state of the application\n    window.location.assign('/');\n  }\n}\n\nexport default new AuthService();\n","import { gql } from '@apollo/client';\n\nexport const LOGIN_USER = gql`\n  mutation login($email: String!, $password: String!) {\n    login(email: $email, password: $password) {\n      token\n      user {\n        _id\n        username\n      }\n    }\n  }\n`;\n\nexport const CREATE_USER = gql`\n  mutation createUser($username: String!, $email: String!, $password: String!) {\n    createUser(username: $username, email: $email, password: $password) {\n      token\n      user {\n        _id\n        username\n      }\n    }\n  }\n`;\n\nexport const SAVE_BOOK = gql`\n\tmutation saveBook($content: bookContent!) {\n\t\tsaveBook(content: $content) {\n\t\t\t_id\n\t\t\tusername\n\t\t\tsavedBooks {\n\t\t\t\tbookId\n\t\t\t\ttitle\n\t\t\t}\n\t\t}\n\t}\n`\nexport const DELETE_BOOK = gql`\nmutation deleteBook($bookId: ID!) {\n  deleteBook(bookId: $bookId) {\n    _id\n\t\t\tusername\n\t\t\tsavedBooks {\n\t\t\t\tbookId\n\t\t\t\ttitle\n\t\t\t}\n\t\t}\n}\n`","export const getSavedBookIds = () => {\n  const savedBookIds = localStorage.getItem('saved_books')\n    ? JSON.parse(localStorage.getItem('saved_books'))\n    : [];\n\n  return savedBookIds;\n};\n\nexport const saveBookIds = (bookIdArr) => {\n  if (bookIdArr.length) {\n    localStorage.setItem('saved_books', JSON.stringify(bookIdArr));\n  } else {\n    localStorage.removeItem('saved_books');\n  }\n};\n\nexport const removeBookId = (bookId) => {\n  const savedBookIds = localStorage.getItem('saved_books')\n    ? JSON.parse(localStorage.getItem('saved_books'))\n    : null;\n\n  if (!savedBookIds) {\n    return false;\n  }\n\n  const updatedSavedBookIds = savedBookIds?.filter((savedBookId) => savedBookId !== bookId);\n  localStorage.setItem('saved_books', JSON.stringify(updatedSavedBookIds));\n\n  return true;\n};\n","import React, { useState, useEffect } from 'react';\nimport { Jumbotron, Container, Col, Form, Button, Card, CardColumns } from 'react-bootstrap';\nimport { useMutation } from '@apollo/client';\nimport Auth from '../utils/auth';\nimport { saveBook, searchGoogleBooks } from '../utils/API';\n\nimport { SAVE_BOOK } from '../utils/mutations';\nimport { saveBookIds, getSavedBookIds } from '../utils/localStorage';\n\n\nconst SearchBooks = () => {\n\n  const [saveBook, { error, data }] = useMutation(SAVE_BOOK);\n  // create state for holding returned google api data\n  const [searchedBooks, setSearchedBooks] = useState([]);\n  // create state for holding our search field data\n  const [searchInput, setSearchInput] = useState('');\n\n  // create state to hold saved bookId values\n  const [savedBookIds, setSavedBookIds] = useState(getSavedBookIds());\n\n  // set up useEffect hook to save `savedBookIds` list to localStorage on component unmount\n  // learn more here: https://reactjs.org/docs/hooks-effect.html#effects-with-cleanup\n  useEffect(() => {\n    return () => saveBookIds(savedBookIds);\n  });\n\n  // create method to search for books and set state on form submit\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    if (!searchInput) {\n      return false;\n    }\n\n    try {\n      const response = await searchGoogleBooks(searchInput);\n\n      if (!response.ok) {\n        throw new Error('something went wrong!');\n      }\n\n      const { items } = await response.json();\n\n      const bookData = items.map((book) => ({\n        bookId: book.id,\n        authors: book.volumeInfo.authors || ['No author to display'],\n        title: book.volumeInfo.title,\n        description: book.volumeInfo.description,\n        image: book.volumeInfo.imageLinks?.thumbnail || '',\n      }));\n\n      setSearchedBooks(bookData);\n      setSearchInput('');\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  // create function to handle saving a book to our database\n  const handleSaveBook = async ( bookId) => {\n\n\n    // event.preventDefault();\n    console.log(bookId);\n    // find the book in `searchedBooks` state by the matching id\n    const bookToSave = searchedBooks.find((book) => book.bookId === bookId);\n    \n    // get token\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\n      console.log(bookToSave, token);\n    if (!token) {\n      return false;\n    }\n    \n    try {\n      const { data } = await saveBook({\n        variables: {\n          content: {\n            ...bookToSave\n          }\n        }\n      });\n\n      // if (!response.ok) {\n      //   throw new Error('something went wrong!');\n      // }\n\n      // if book successfully saves to user's account, save book id to state\n      setSavedBookIds([...savedBookIds, bookToSave.bookId]);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  return (\n    <>\n      <Jumbotron fluid className='text-light bg-dark'>\n        <Container>\n          <h1>Search for Books!</h1>\n          <Form onSubmit={handleFormSubmit}>\n            <Form.Row>\n              <Col xs={12} md={8}>\n                <Form.Control\n                  name='searchInput'\n                  value={searchInput}\n                  onChange={(e) => setSearchInput(e.target.value)}\n                  type='text'\n                  size='lg'\n                  placeholder='Search for a book'\n                />\n              </Col>\n              <Col xs={12} md={4}>\n                <Button type='submit' variant='success' size='lg'>\n                  Submit Search\n                </Button>\n              </Col>\n            </Form.Row>\n          </Form>\n        </Container>\n      </Jumbotron>\n\n      <Container>\n        <h2>\n          {searchedBooks.length\n            ? `Viewing ${searchedBooks.length} results:`\n            : 'Search for a book to begin'}\n        </h2>\n        <CardColumns>\n          {searchedBooks.map((book) => {\n            return (\n              <Card key={book.bookId} border='dark'>\n                {book.image ? (\n                  <Card.Img src={book.image} alt={`The cover for ${book.title}`} variant='top' />\n                ) : null}\n                <Card.Body>\n                  <Card.Title>{book.title}</Card.Title>\n                  <p className='small'>Authors: {book.authors}</p>\n                  <Card.Text>{book.description}</Card.Text>\n                  {Auth.loggedIn() && (\n                    <Button\n                      disabled={savedBookIds?.some((savedBookId) => savedBookId === book.bookId)}\n                      className='btn-block btn-info'\n                      onClick={() => handleSaveBook(book.bookId)}>\n                      {savedBookIds?.some((savedBookId) => savedBookId === book.bookId)\n                        ? 'This book has already been saved!'\n                        : 'Save this Book!'}\n                    </Button>\n                  )}\n                </Card.Body>\n              </Card>\n            );\n          })}\n        </CardColumns>\n      </Container>\n    </>\n  );\n};\n\nexport default SearchBooks;\n","// route to get logged in user's info (needs the token)\n// export const getMe = (token) => {\n//   return fetch('/api/users/me', {\n//     headers: {\n//       'Content-Type': 'application/json',\n//       authorization: `Bearer ${token}`,\n//     },\n//   });\n// };\n\n// export const createUser = (userData) => {\n//   return fetch('/api/users', {\n//     method: 'POST',\n//     headers: {\n//       'Content-Type': 'application/json',\n//     },\n//     body: JSON.stringify(userData),\n//   });\n// };\n\n// export const loginUser = (userData) => {\n//   return fetch('/api/users/login', {\n//     method: 'POST',\n//     headers: {\n//       'Content-Type': 'application/json',\n//     },\n//     body: JSON.stringify(userData),\n//   });\n// };\n\n// save book data for a logged in user\n// export const saveBook = (bookData, token) => {\n//   return fetch('/api/users', {\n//     method: 'PUT',\n//     headers: {\n//       'Content-Type': 'application/json',\n//       authorization: `Bearer ${token}`,\n//     },\n//     body: JSON.stringify(bookData),\n//   });\n// };\n\n// // remove saved book data for a logged in user\n// export const deleteBook = (bookId, token) => {\n//   return fetch(`/api/users/books/${bookId}`, {\n//     method: 'DELETE',\n//     headers: {\n//       authorization: `Bearer ${token}`,\n//     },\n//   });\n// };\n\n// make a search to google books api\n// https://www.googleapis.com/books/v1/volumes?q=harry+potter\nexport const searchGoogleBooks = (query) => {\n  return fetch(`https://www.googleapis.com/books/v1/volumes?q=${query}`);\n};\n","import { gql } from \"@apollo/client\";\n\n\nexport const QUERY_USERS = gql`\nquery user {\n  users {\n    _id\n    username\n    email\n    savedBooks {\n      _id\n      title\n      authors\n      bookId\n      description\n      image\n    }\n  }\n}\n`;\n\nexport const QUERY_USER = gql`\n  query user($username: String!) {\n    getSingleUser(username: $username) {\n      _id\n      username\n      email\n      savedBooks {\n        _id\n      title\n      authors\n      bookId\n      description\n      image\n      }\n    }\n  }\n`;\n\nexport const QUERY_BOOKS = gql`\n query getSavedBooks($username: String!) {\n  getSavedBooks(username: $username) {\n      savedBooks {\n        _id\n      title\n      authors\n      bookId\n      description\n      image\n      }\n    }\n  }\n`;\n\n\nexport const GET_ME = gql`\n  query me {\n    me {\n      _id\n    username\n    email\n    savedBooks {\n      bookId\n      title\n      authors\n      description\n      image\n    }\n  }\n  }\n`;\n","import React, { useState } from 'react';\nimport { Jumbotron, Container, CardColumns, Card, Button } from 'react-bootstrap';\nimport { useQuery , useMutation } from '@apollo/client';\nimport { GET_ME } from '../utils/queries';\nimport { DELETE_BOOK } from '../utils/mutations';\n// import { getMe, deleteBook } from '../utils/API';\nimport Auth from '../utils/auth';\nimport { removeBookId } from '../utils/localStorage';\n\nconst SavedBooks = () => {\n  const { loading, error, data } = useQuery(GET_ME);\n  const [deleteBook, { }] = useMutation(DELETE_BOOK);\n  if (loading) return \"Loading...\";\n  if (error) return `Error! ${error.message}`;\n\n  const userData = data?.me || [];\n\n\n  // create function that accepts the book's mongo _id value as param and deletes the book from the database\n  const handleDeleteBook = async (bookId) => {\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\n\n    if (!token) {\n      return false;\n    }\n\n    try {\n      const { data } = await deleteBook({\n        variables: {\n          bookId: bookId\n        }\n      });\n\n      // upon success, remove book's id from localStorage\n      removeBookId(bookId);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  // if data isn't here yet, say so\n  if ( loading ) {\n    return <h2>LOADING...</h2>;\n  }\n\n  return (\n    <>\n      <Jumbotron fluid className='text-light bg-dark'>\n        <Container>\n          <h1>Viewing saved books!</h1>\n        </Container>\n      </Jumbotron>\n      <Container>\n        <h2>\n          {userData.savedBooks.length\n            ? `Viewing ${userData.savedBooks.length} saved ${userData.savedBooks.length === 1 ? 'book' : 'books'}:`\n            : 'You have no saved books!'}\n        </h2>\n        <CardColumns>\n          {userData.savedBooks.map((book) => {\n            return (\n              <Card key={book.bookId} border='dark'>\n                {book.image ? <Card.Img src={book.image} alt={`The cover for ${book.title}`} variant='top' /> : null}\n                <Card.Body>\n                  <Card.Title>{book.title}</Card.Title>\n                  <p className='small'>Authors: {book.authors}</p>\n                  <Card.Text>{book.description}</Card.Text>\n                  <Button className='btn-block btn-danger' onClick={() => handleDeleteBook(book.bookId)}>\n                    Delete this Book!\n                  </Button>\n                </Card.Body>\n              </Card>\n            );\n          })}\n        </CardColumns>\n      </Container>\n    </>\n  );\n};\n\nexport default SavedBooks;\n","import React, { useState } from 'react';\nimport { Form, Button, Alert } from 'react-bootstrap';\n\nimport { useMutation } from '@apollo/client';\nimport { CREATE_USER } from '../utils/mutations';\n\n// import { createUser } from '../utils/API';\nimport Auth from '../utils/auth';\n\nconst SignupForm = () => {\n  // set initial form state\n  const [userFormData, setUserFormData] = useState({ username: '', email: '', password: '' });\n\n  const [createUser, { error, data }] = useMutation(CREATE_USER);\n\n  // set state for form validation\n  const [validated] = useState(false);\n  // set state for alert\n  const [showAlert, setShowAlert] = useState(false);\n\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n    setUserFormData({ ...userFormData, [name]: value });\n  };\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n    console.log(userFormData);\n\n\n    try {\n      const { data } = await createUser({\n        variables: { ...userFormData },\n      });\nconsole.log(data);\n      Auth.login(data.createUser.token);\n    } catch (e) {\n      console.error(e);\n    }\n  \n    // check if form has everything (as per react-bootstrap docs)\n    // const form = event.currentTarget;\n    // if (form.checkValidity() === false) {\n    //   event.preventDefault();\n    //   event.stopPropagation();\n    // }\n\n    // try {\n    //   const response = await createUser(userFormData);\n\n    //   if (!response.ok) {\n    //     throw new Error('something went wrong!');\n    //   }\n\n    //   const { token, user } = await response.json();\n    //   console.log(user);\n    //   Auth.login(token);\n    // } catch (err) {\n    //   console.error(err);\n    //   setShowAlert(true);\n    // }\n\n    setUserFormData({\n      username: '',\n      email: '',\n      password: '',\n    });\n  };\n\n  return (\n    <>\n      {/* This is needed for the validation functionality above */}\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\n        {/* show alert if server response is bad */}\n        <Alert dismissible onClose={() => setShowAlert(false)} show={showAlert} variant='danger'>\n          Something went wrong with your signup!\n        </Alert>\n\n        <Form.Group>\n          <Form.Label htmlFor='username'>Username</Form.Label>\n          <Form.Control\n            type='text'\n            placeholder='Your username'\n            name='username'\n            onChange={handleInputChange}\n            value={userFormData.username}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Username is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='email'>Email</Form.Label>\n          <Form.Control\n            type='email'\n            placeholder='Your email address'\n            name='email'\n            onChange={handleInputChange}\n            value={userFormData.email}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Email is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='password'>Password</Form.Label>\n          <Form.Control\n            type='password'\n            placeholder='Your password'\n            name='password'\n            onChange={handleInputChange}\n            value={userFormData.password}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Password is required!</Form.Control.Feedback>\n        </Form.Group>\n        <Button\n          disabled={!(userFormData.username && userFormData.email && userFormData.password)}\n          type='submit'\n          variant='success'>\n          Submit\n        </Button>\n      </Form>\n    </>\n  );\n};\n\nexport default SignupForm;\n","// see SignupForm.js for comments\nimport React, { useState } from 'react';\nimport { Form, Button, Alert } from 'react-bootstrap';\nimport { useMutation } from '@apollo/client';\nimport { LOGIN_USER } from '../utils/mutations';\n\n\n// import { loginUser } from '../utils/API';\nimport Auth from '../utils/auth';\n\nconst LoginForm = (props) => {\n  const [userFormData, setUserFormData] = useState({ email: '', password: '' });\n  const [validated] = useState(false);\n  const [showAlert, setShowAlert] = useState(false);\n\n  const [login, { error, data }] = useMutation(LOGIN_USER);\n\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n    setUserFormData({ ...userFormData, [name]: value });\n  };\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n    console.log(userFormData);\n\n    try {\n      const { data } = await login({\n        variables: { ...userFormData },\n      });\n\n      Auth.login(data.login.token);\n    } catch (e) {\n      console.error(e);\n    }\n    // check if form has everything (as per react-bootstrap docs)\n    // const form = event.currentTarget;\n    // if (form.checkValidity() === false) {\n    //   event.preventDefault();\n    //   event.stopPropagation();\n    // }\n\n    // try {\n    //   const response = await loginUser(userFormData);\n\n    //   if (!response.ok) {\n    //     throw new Error('something went wrong!');\n    //   }\n\n    //   const { token, user } = await response.json();\n    //   console.log(user);\n    //   Auth.login(token);\n    // } catch (err) {\n    //   console.error(err);\n    //   setShowAlert(true);\n    // }\n\n    setUserFormData({\n      username: '',\n      email: '',\n      password: '',\n    });\n  };\n\n  return (\n    <>\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\n        <Alert dismissible onClose={() => setShowAlert(false)} show={showAlert} variant='danger'>\n          Something went wrong with your login credentials!\n        </Alert>\n        <Form.Group>\n          <Form.Label htmlFor='email'>Email</Form.Label>\n          <Form.Control\n            type='text'\n            placeholder='Your email'\n            name='email'\n            onChange={handleInputChange}\n            value={userFormData.email}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Email is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='password'>Password</Form.Label>\n          <Form.Control\n            type='password'\n            placeholder='Your password'\n            name='password'\n            onChange={handleInputChange}\n            value={userFormData.password}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Password is required!</Form.Control.Feedback>\n        </Form.Group>\n        <Button\n          disabled={!(userFormData.email && userFormData.password)}\n          type='submit'\n          variant='success'>\n          Submit\n        </Button>\n      </Form>\n    </>\n  );\n};\n\nexport default LoginForm;\n","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Navbar, Nav, Container, Modal, Tab } from 'react-bootstrap';\nimport SignUpForm from './SignupForm';\nimport LoginForm from './LoginForm';\n\nimport Auth from '../utils/auth';\n\nconst AppNavbar = () => {\n  // set modal display state\n  const [showModal, setShowModal] = useState(false);\n\n  return (\n    <>\n      <Navbar bg='dark' variant='dark' expand='lg'>\n        <Container fluid>\n          <Navbar.Brand as={Link} to='/'>\n            Google Books Search\n          </Navbar.Brand>\n          <Navbar.Toggle aria-controls='navbar' />\n          <Navbar.Collapse id='navbar'>\n            <Nav className='ml-auto'>\n              <Nav.Link as={Link} to='/'>\n                Search For Books\n              </Nav.Link>\n              {/* if user is logged in show saved books and logout */}\n              {Auth.loggedIn() ? (\n                <>\n                  <Nav.Link as={Link} to='/saved'>\n                    See Your Books\n                  </Nav.Link>\n                  <Nav.Link onClick={Auth.logout}>Logout</Nav.Link>\n                </>\n              ) : (\n                <Nav.Link onClick={() => setShowModal(true)}>Login/Sign Up</Nav.Link>\n              )}\n            </Nav>\n          </Navbar.Collapse>\n        </Container>\n      </Navbar>\n      {/* set modal data up */}\n      <Modal\n        size='lg'\n        show={showModal}\n        onHide={() => setShowModal(false)}\n        aria-labelledby='signup-modal'>\n        {/* tab container to do either signup or login component */}\n        <Tab.Container defaultActiveKey='login'>\n          <Modal.Header closeButton>\n            <Modal.Title id='signup-modal'>\n              <Nav variant='pills'>\n                <Nav.Item>\n                  <Nav.Link eventKey='login'>Login</Nav.Link>\n                </Nav.Item>\n                <Nav.Item>\n                  <Nav.Link eventKey='signup'>Sign Up</Nav.Link>\n                </Nav.Item>\n              </Nav>\n            </Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            <Tab.Content>\n              <Tab.Pane eventKey='login'>\n                <LoginForm handleModalClose={() => setShowModal(false)} />\n              </Tab.Pane>\n              <Tab.Pane eventKey='signup'>\n                <SignUpForm handleModalClose={() => setShowModal(false)} />\n              </Tab.Pane>\n            </Tab.Content>\n          </Modal.Body>\n        </Tab.Container>\n      </Modal>\n    </>\n  );\n};\n\nexport default AppNavbar;\n","import React from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport SearchBooks from './pages/SearchBooks';\nimport SavedBooks from './pages/SavedBooks';\nimport Navbar from './components/Navbar';\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n  createHttpLink,\n} from '@apollo/client';\nimport { setContext } from '@apollo/client/link/context';\n\nconst httpLink = createHttpLink({\n  uri: '/graphql',\n});\n\nconst authLink = setContext((_, { headers }) => {\n  // get the authentication token from local storage if it exists\n  const token = localStorage.getItem('id_token');\n  // return the headers to the context so httpLink can read them\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : '',\n    },\n  };\n});\n\nconst client = new ApolloClient({\n  // Set up our client to execute the `authLink` middleware prior to making the request to our GraphQL API\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache(),\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n    <Router>\n      <>\n        <Navbar />\n        <Switch>\n          <Route exact path='/' component={SearchBooks} />\n          <Route exact path='/saved' component={SavedBooks} />\n          <Route render={() => <h1 className='display-2'>Wrong page!</h1>} />\n        </Switch>\n      </>\n    </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}